cmake_minimum_required(VERSION 3.0)
project({{.Target}})
 
set({{.TargetLarge}}_MAJOR_VERSION {{.VersionMajor}})
set({{.TargetLarge}}_MINOR_VERSION {{.VersionMinor}})
set({{.TargetLarge}}_PATCH_VERSION {{.VersionPatch}})
set({{.TargetLarge}}_VERSION
    $\{{{.TargetLarge}}_MAJOR_VERSION}.$\{{{.TargetLarge}}_MINOR_VERSION}.$\{{{.TargetLarge}}_PATCH_VERSION})
 
# Offer the user the choice of overriding the installation directories
set(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
set(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for executables")
set(INSTALL_INCLUDE_DIR include CACHE PATH
  "Installation directory for header files")
if (DEFINED ENV{INSTALL_CMAKE_DIR})
    set(INSTALL_CMAKE_DIR "$ENV{INSTALL_CMAKE_DIR}"} CACHE PATH
    "Installation directory for CMake files")
else()
    set(INSTALL_CMAKE_DIR "vender/pkg"} CACHE PATH
    "Installation directory for CMake files")
endif()
 
# Make relative paths absolute (needed later on)
foreach(p LIB BIN INCLUDE CMAKE)
  set(var INSTALL_${p}_DIR)
  if(NOT IS_ABSOLUTE "${${var}}")
    set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
  endif()
endforeach()

# enable Qt
set(CMAKE_AUTOMOC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

{{range $index, $qtmodule := .QtModules}}find_package(Qt5{{$qtmodule}} REQUIRED)
{{end}}

include_directories("${PROJECT_SOURCE_DIR}/include")

# set up include-directories
include("CMakeExtra.txt")

{{if .HasTest}}
# enable tests
enable_testing()
find_package(Qt5Test REQUIRED)

{{range $index, $test := .Tests}}add_executable({{$test}} ${PROJECT_SOURCE_DIR}/test/{{$test}}.cpp{{range $index, $source := .ExtraTestSources}} {{$source}}{{end}}{{range $index, $source := .Sources}} ${PROJECT_SOURCE_DIR}/{{$source}}{{end}})
add_test({{$test}})
qt5_use_modules({{$test}} Test{{range $index, $qtmodule := .QtModules}} {{$qtmodule}}{{end}})
{{end}}{{end}}

# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE {{.Target}})
 
# Create the {{.Target}}Config.cmake and {{.Target}}ConfigVersion files
file(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}"
   "${INSTALL_INCLUDE_DIR}")
# ... for the build tree
set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}" "${PROJECT_BINARY_DIR}")
configure_file({{.Target}}Config.cmake.in
  "${PROJECT_BINARY_DIR}/{{.Target}}Config.cmake" @ONLY)
# ... for the install tree
set(CONF_INCLUDE_DIRS "\$\{{{.TargetLarge}}_CMAKE_DIR}/${REL_INCLUDE_DIR}")
configure_file({{.Target}}Config.cmake.in
  "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/{{.Target}}Config.cmake" @ONLY)
# ... for both
configure_file({{.Target}}ConfigVersion.cmake.in
  "${PROJECT_BINARY_DIR}/{{.Target}}ConfigVersion.cmake" @ONLY)
 
# Install the {{.Target}}Config.cmake and {{.Target}}ConfigVersion.cmake
install(FILES
  "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/{{.Target}}Config.cmake"
  "${PROJECT_BINARY_DIR}/{{.Target}}ConfigVersion.cmake"
  DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)
 
# Install the export set for use with the install-tree
install(EXPORT {{.Target}}Targets DESTINATION
  "${INSTALL_CMAKE_DIR}" COMPONENT dev)
